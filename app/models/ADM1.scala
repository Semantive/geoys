package models

import com.vividsolutions.jts.geom.Point
import play.api.Play.current
import utils.pgSlickDriver.simple._

case class ADM1(id: Option[Long], name: String, asciiName: String, admCode: String, timezoneId: Option[Long],
                location: Option[Point], countryId: Long, population: Option[Long], geoId: Long)

trait ADM1Component { self: CountryComponent with TimezoneComponent =>
  val ADM1s: ADM1s

  class ADM1s extends Table[ADM1]("adm1") {
    /** Id generated by the db */
    def id          = column[Long]("id", O.PrimaryKey, O.AutoInc)
    /** Name of the country. */
    def name        = column[String]("name", O.DBType("VARCHAR(200)"))
    /** Name of the country (ASCII characters only). */
    def asciiName   = column[String]("ascii_name", O.DBType("VARCHAR(200)"))
    /** ID of administrative division (some geonames invention). */
    def admCode     = column[String]("adm_code", O.DBType("VARCHAR(40)"))
    /** Id of the timezone. */
    def timezoneId  = column[Long]("timezone_id")
    /** Location of the country (stored as a point). */
    def location    = column[Point]("location")
    /** Id of the country ADM belongs to. */
    def countryId   = column[Long]("country_id")
    /** Population of the adm. */
    def population  = column[Long]("population")
    /** Id of the continent in the Geonames db. */
    def geoId       = column[Long]("geo_id")

    /** REFERENCES key on country.id. */
    def fkCountry   = foreignKey("fk_adm1_country", countryId, Countries)(_.id)
    /** REFERENCES key on timezone.id. */
    def fkTimezone  = foreignKey("fk_adm1_timezone", timezoneId, Timezones)(_.id)
    /** UNIQUE index on geoId. */
    def idxGeoId    = index("uq_adm1_geo_id", geoId, unique = true)

    /** Default projection.. */
    def * = id.? ~ name ~ asciiName ~ admCode ~ timezoneId.? ~ location.? ~ countryId ~ population.? ~ geoId <> (ADM1.apply _, ADM1.unapply _)
    /** */
    def autoInc = * returning id
  }
}

object ADM1s extends DAO {

}